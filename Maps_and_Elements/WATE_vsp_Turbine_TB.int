
#ifndef _WATE_vsp_Turbine_TB__INT
#define _WATE_vsp_Turbine_TB__INT

#include "WATE_vsp_COMMON_TB.int"

//  ________  _____  ___  _____  ______
// /_  __/ / / / _ \/ _ )/  _/ |/ / __/
//  / / / /_/ / , _/ _  |/ //    / _/
// /_/  \____/_/|_/____/___/_/|_/___/


/**
 *Author: Tim Unton
 *Updated: 4/26/10
 ****************************************************************/
class WATE_vsp_Turbine_TB extends WATE_vsp_common_TB
{

  /**
   *
   ****************************************************************/
  void update() {
    int pad = 4; 
    filledBlock = { }; 

    int order = 3;
    real foil_length = 0.0;
    real foil_height = 0.0;
    real foil_hub_radius = 0.0;
    real foil_tip_radius = 0.0;
    real H2T_ratio = 0.0;
    real ny = 0.0;
    real n_height = 0.0;
    real tchord = 0.0;
    real taper_ratio = 0.0;

    real lo = 0.0;
    real hi = 0.0;

    string ts;

    real pair[2];
    real root[][] = { { } };
    real tip[][] = { { } };
    real sroot_x[] = {};
    real stip_x[] = {};

    real twists[3];
    int flip_camber[3];
    real cambers[3];
    real camber_locs[3];
    real camber_thicks[3];

    real colors[3];
    int rors = $ROTOR;
    int nstage = 0;
    real total_length = 0.0;
    real twist = 0.0;
    real root_chord = 0.0;
    int number_of_blades = 0;
    int added_last_point = 0;
    
    int nstages = max(comp_name->numStages, comp_name->numStages_in);

    real norm_nstage;
    real xloc = 0.0;
    real x_offset = 0.0;

    int blade_cnt = 0;
    int rotor_cnt = 0;
    int stator_cnt = 0;
    string name_tag;


    int rc;
    int returned_vps_child_pointers[] = {};
    int vsp_pointer = randomInt(1,9999999999);
    int vsp_child_pointers[] = {};
    int vsp_parent_pointer = 0;

//Seidel omitted
/*
    // DUMPS THE COMPONENTS VARIABLES
    printValue(comp_name->list("Variable", TRUE));

    cout << comp_name << ": " << endl;
    cout << "INPORT: " << endl;
    cout << "    INNER RADIUS   : " << comp_name->inPort.innerRadius << endl;
    cout << "    OUTER RADIUS   : " << comp_name->inPort.outerRadius << endl;
    cout << "    AXIAL POSITION : " << comp_name->inPort.axialPosition << endl;
    //printValue(comp_name->inPort.list("Variable", FALSE));


    cout << "OUTPORT: " << endl;
    cout << "    INNER RADIUS   : " << comp_name->outPort.innerRadius << endl;
    cout << "    OUTER RADIUS   : " << comp_name->outPort.outerRadius << endl;
    cout << "    AXIAL POSITION : " << comp_name->outPort.axialPosition << endl;
    //printValue(comp_name->outPort.list("Variable", FALSE));
*/

    // TBD IS THERE A LEADING "NOZZLE GUIDE VANE" ROW ?
    cambers = { 0.0, 0.0, 0.0 };
    camber_locs = { 0.5, 0.5, 0.5 };
    camber_thicks = { 0.09, 0.09, 0.09 };
    
    if( comp_name->hasInterface("WATEaxialTurbine") ) {
      if( ! comp_name->S_RearFrame.isEmpty() ) {
        // Rear frame logic broken, omit for now, TBD (Berton)
        //string fs = comp_name->S_RearFrame.GetPathName();
        //cout << "TURBINE REAR FRAME PATH: " << fs << endl;  //Seidel omitted
        //string socket_name = "S_RearFrame";
        //returned_vps_child_pointers = add_frame_from_socket(socket_name, pad, vsp_pointer);
        //for( rc = 0 ; rc > returned_vps_child_pointers.entries() ; rc++ ) {
        //  vsp_child_pointers.append( returned_vps_child_pointers[rc] );
        //}
      //returned_vps_child_pointers.resize(0);
      }
      if( ! comp_name->S_Disk.isEmpty() ) {
        // TBD - NEED TO HANDLE DISK IN SOCKET HERE
      }
    }

    for( nstage = 0 ;  nstage < nstages ; nstage++ ) {

      for( rors = $ROTOR ; rors <= $STATOR ; rors++ ) {

        blade_cnt++;
        name_tag = "B";
        ts = comp_name->getName() + "_STG:" + toStr(nstage+1) + "_" + name_tag + ":" + toStr(blade_cnt); 
        if( rors == $ROTOR ) {
          rotor_cnt++;
          name_tag = "R";
          ts = comp_name->getName() + "_STG:" + toStr(nstage+1) + "_" + name_tag + ":" + toStr(rotor_cnt);

          foil_length = comp_name->bladeLen_stg[nstage];
          foil_hub_radius = comp_name->hubRadius_stg[nstage];
          foil_tip_radius = comp_name->tipRadius_stg[nstage];
          foil_height = foil_hub_radius - foil_tip_radius;
          x_offset = 0.0;
        }
        if( rors == $STATOR ) {
          stator_cnt++;
          name_tag = "S";
          ts = comp_name->getName() + "_STG:" + toStr(nstage+1) + "_" + name_tag + ":" + toStr(stator_cnt);

          foil_length = comp_name->statorLen_stg[nstage];
          foil_height = foil_length * comp_name->statorAR_stg[nstage];
          foil_tip_radius = comp_name->tipRadius_stg[nstage];
          foil_hub_radius = comp_name->hubRadius_stg[nstage];


          if( comp_name->geometryType == "ConstTipRadius" ) {
            foil_hub_radius = foil_tip_radius - foil_height;
          }
          if( comp_name->geometryType == "ConstMeanRadius" ) {
            ny = ( comp_name->hubRadius_stg[nstage] + comp_name->tipRadius_stg[nstage] ) / 2.0;
            foil_tip_radius = ny + foil_height / 2.0;
            foil_hub_radius = ny - foil_height / 2.0;
          }
          if( comp_name->geometryType == "ConstHubRadius" ) {
            foil_tip_radius = foil_hub_radius + foil_height;
          }

          x_offset = comp_name->bladeLen_stg[nstage] + comp_name->spacerLen_stg[nstage];
        }


        xloc = comp_name->inPort.axialPosition + total_length + x_offset + foil_length / 2.0;

        lo = (nstage/(nstages-1.0));
        hi = (1.0-nstage/(nstages-1.0));

        if( rors == $ROTOR ) {
          colors[$R] = lo*255.0;
          colors[$G] = 0.0;
          colors[$B] = hi*255.0;
          
          twists[$ROOT] = 100.0;
          twists[$MEAN] = 135.0;
          twists[$TIP] = 155.0;
          flip_camber = { 1, 1, 1 };
          number_of_blades = comp_name->numBlades_stg[nstage];
        }
        if( rors == $STATOR ) {
          
          colors[$R] = hi*255.0;
          colors[$G] = 255.0;
          colors[$B] = lo*255.0;
          
          twists[$ROOT] = 80.0;
          twists[$MEAN] = 60.0;
          twists[$TIP] = 40.0;
          flip_camber = { 0, 0, 0 };
          number_of_blades = comp_name->numStatorBlades_stg[nstage];
        }

        // BLADE PARAMETERS BASED ON NORMALIZED STAGE LOCATION (0.0 - 1.0)
        //cout << "NSTAGE " << nstage << endl;
        //cout << "NSTAGES-1" << nstages-1 << endl;
        if( nstages <= 1 ) {
          norm_nstage = 0.0;
        } else {
          norm_nstage = toReal(nstage)/toReal(nstages-1);
        }
        twists = comp_name->twangle.evalStacked( norm_nstage, rors ); 
        cambers = comp_name->tcamber.evalStacked( norm_nstage, rors ); 
        camber_locs = comp_name->tcamber_loc.evalStacked( norm_nstage, rors ); 
        camber_thicks = comp_name->tcamber_thick.evalStacked( norm_nstage, rors ); 

        taper_ratio = comp_name->bladeTaperRatio;

//Seidel omitted
/*
        cout << "BLADE (" << rors << "-" << norm_nstage << ") "
             << " TAPER RATIO "
             << taper_ratio
             << " comp_name->bladeTaperRatio = "
             << comp_name->bladeTaperRatio
             << "  X = "
             << xloc
             << "  HUB D = " 
             << foil_hub_radius * 2.0 
             << "  TIP D = " 
             << foil_tip_radius * 2.0
             << "   H2T RATIO = " 
             << foil_hub_radius / foil_tip_radius
             << endl;
*/

        returned_vps_child_pointers = add_blade(ts, pad, number_of_blades, 
                  xloc, foil_length, foil_height, foil_hub_radius, foil_tip_radius, taper_ratio,
                  colors, twists, flip_camber, cambers, camber_locs, camber_thicks, vsp_pointer);
        for( rc = 0 ; rc > returned_vps_child_pointers.entries() ; rc++ ) {
          vsp_child_pointers.append( returned_vps_child_pointers[rc] );
        }
        returned_vps_child_pointers.resize(0);
        
        // ROOT LE;
        pair[0] = comp_name->inPort.axialPosition + total_length + x_offset;
        pair[1] = foil_hub_radius * 2.0;
        root.append(pair);
        sroot_x.append(pair[0]);

        // ROOT TE;
        added_last_point = 0;
        if( nstage == ( nstages - 1 ) ) {
          if( rors == $STATOR ) {
            // ADD LAST DATA POINT - AVOID EXTRAPOLATION BEYOND POLYNOMIAL DEFINITION
            //pair[0] = comp_name->inPort.axialPosition + total_length + x_offset + foil_length;
            pair[0] = comp_name->outPort.axialPosition;
            pair[1] = foil_hub_radius * 2.0;
            root.append(pair);
            sroot_x.append(comp_name->outPort.axialPosition);
            added_last_point = 1;
          }
        }
        if( added_last_point == 0 ) {
          sroot_x.append(comp_name->inPort.axialPosition + total_length + x_offset + foil_length);
        }

        // TIP LE
        pair[0] = comp_name->inPort.axialPosition + total_length + x_offset;
        pair[1] = foil_tip_radius * 2.0;
        tip.append(pair);
        stip_x.append(pair[0]);

        // TIP TE
        added_last_point = 0;
        if( nstage == (nstages -1) ) {
          if( rors == $STATOR ) {
            // ADD LAST DATA POINT - AVOID EXTRAPOLATION BEYOND POLYNOMIAL DEFINITION
            pair[0] = comp_name->inPort.axialPosition + total_length + x_offset + foil_length;
            pair[1] = foil_tip_radius * 2.0;
            tip.append(pair);
            stip_x.append(comp_name->outPort.axialPosition);
            added_last_point = 1;
          }
        }
        if( added_last_point == 0 ) {
          stip_x.append(comp_name->inPort.axialPosition + total_length + x_offset + foil_length);
        }
      
      } // ROTOR/STATOR LOOP


      total_length = total_length + comp_name->length_stg[nstage];

      
    } // NSTAGES LOOP
   

    //int next_sections = 6;
    //int prev_sections = 6;
    int i;
    //real max_x = -1.0E+12;
    //real min_x = 1.0E+12;

    real ymax, ymin, dy;

    real xpts[] = { };
    real ypts[] = { };


//    _____  ___  _________    ______  _____  _______  _________
//   /  _/ |/ / |/ / __/ _ \  / __/ / / / _ \/ __/ _ |/ ___/ __/
//  _/ //    /    / _// , _/ _\ \/ /_/ / , _/ _// __ / /__/ _/
// /___/_/|_/_/|_/___/_/|_| /___/\____/_/|_/_/ /_/ |_\___/___/

    //////////////////////////////////////////////////////////////////////////////// 
    // INNER FLOW SURFACE


    xpts.resize(root.entries());
    ypts.resize(root.entries());
    for( i = 0 ; i < root.entries() ; i++ ) {
      xpts[i] = root[i][0];
      ypts[i] = root[i][1];
      if( i == 0 ) {
        ymax = ypts[i];
        ymin = ypts[i];
      } else {
        ymax = max(ymax, ypts[i]);
        ymin = min(ymin, ypts[i]);
      }
//      cout << "HPT ROOTXY " << xpts[i] << ", " << ypts[i] << endl;  //Seidel omitted
    }
    
    dy = ymax - ymin;

//    cout << xpts << endl;  //Seidel omitted
//    cout << ypts << endl;  //Seidel omitted

    //add_fuse_from_points( xpts, ypts, xpts.entries(), "_IN_FS", 155, 0, 255, 5, pad );
    if( ( abs(dy) < 1.0E-6 ) || ( xpts.entries() == 2 ) ) {
      returned_vps_child_pointers = add_fuse_from_points( xpts, ypts, xpts.entries(), "_FS_IN", 155, 0, 255, 5, pad, vsp_pointer );
    } else {
      order = min( (xpts.entries() - 1), 3);
      returned_vps_child_pointers = add_fuse_from_fit_points( xpts, ypts, xpts.entries(), order, sroot_x, "_FS_IN", 155, 0, 255, 5, pad, vsp_pointer );
    }
    for( rc = 0 ; rc > returned_vps_child_pointers.entries() ; rc++ ) {
      vsp_child_pointers.append( returned_vps_child_pointers[rc] );
    }
    returned_vps_child_pointers.resize(0);

//   ____  __  _______________    ______  _____  _______  _________
//  / __ \/ / / /_  __/ __/ _ \  / __/ / / / _ \/ __/ _ |/ ___/ __/
// / /_/ / /_/ / / / / _// , _/ _\ \/ /_/ / , _/ _// __ / /__/ _/
// \____/\____/ /_/ /___/_/|_| /___/\____/_/|_/_/ /_/ |_\___/___/

    //////////////////////////////////////////////////////////////////////////////// 
    // OUTER FLOW SURFACE

    
    xpts.resize(tip.entries());
    ypts.resize(tip.entries());
    for( i = 0 ; i < tip.entries() ; i++ ) {
      xpts[i] = tip[i][0];
      ypts[i] = tip[i][1];
      if( i == 0 ) {
        ymax = ypts[i];
        ymin = ypts[i];
      } else {
        ymax = max(ymax, ypts[i]);
        ymin = min(ymin, ypts[i]);
      }
//      cout << "HPT TIPXY " << xpts[i] << ", " << ypts[i] << endl;  //Seidel omitted
    }
    
    dy = ymax - ymin;

//    cout << xpts << endl;  //Seidel omitted
//    cout << ypts << endl;  //Seidel omitted
	//loop through & collect childeren of Turbine
    if( ( abs(dy) < 1.0E-6 ) || ( xpts.entries() == 2 ) ) {
      returned_vps_child_pointers = add_fuse_from_points( xpts, ypts, xpts.entries(), "_FS_OUT", 0, 155, 255, 5, pad, vsp_pointer );
    } else {
      order = min( (xpts.entries() - 1), 3);
      returned_vps_child_pointers = add_fuse_from_fit_points( xpts, ypts, xpts.entries(), order, stip_x, "_FS_OUT", 0, 155, 255, 5, pad, vsp_pointer );
    }
	//add list of childeren to parent for VSP for Turbine
    for( rc = 0 ; rc > returned_vps_child_pointers.entries() ; rc++ ) {
      vsp_child_pointers.append( returned_vps_child_pointers[rc] );
    }
    returned_vps_child_pointers.resize(0);

    add_vsp_blank(comp_name, pad, vsp_pointer, vsp_parent_pointer, vsp_child_pointers);

 
  } // UPDATE ROUTINE
}

#endif

